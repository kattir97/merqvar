generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Word {
  id                       String                   @id @default(cuid())
  headword                 String
  root                     String?
  ergative                 String?
  speechPart               String
  origin                   String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  audio                    String?
  textsearchable_index_col Unsupported("tsvector")? @default(dbgenerated("to_tsvector('simple'::regconfig, ((COALESCE(headword, ''::text) || ' '::text) || COALESCE(root, ''::text)))"))
  examples                 Example[]
  translations             Translation[]
  tags                     Tag[]                    @relation("TagToWord")

  @@index([textsearchable_index_col], map: "idx_word_textsearch", type: Gin)
}

model Translation {
  id                       String                   @id @default(cuid())
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  wordId                   String
  translation              String
  textsearchable_index_col Unsupported("tsvector")? @default(dbgenerated("to_tsvector('russian'::regconfig, COALESCE(translation, ''::text))"))
  word                     Word                     @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@index([textsearchable_index_col], map: "idx_translation_textsearch", type: Gin)
}

model Example {
  id          String   @id @default(cuid())
  example     String
  translation String
  wordId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  word        Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  words     Word[]   @relation("TagToWord")
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  username  String    @unique
  password  Password?
  roles     Role[]    @relation("RoleToUser")
}

model Permission {
  id          String            @id @default(cuid())
  description String?           @default("")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  action      PermissionActions
  entity      EntityName
  access      AccessName
  roles       Role[]            @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  description String?      @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        RoleName     @unique
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

enum RoleName {
  admin
  user
  moderator
}

enum PermissionActions {
  create
  read
  update
  delete
}

enum EntityName {
  user
  word
}

enum AccessName {
  own
  any
}
