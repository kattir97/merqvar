import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding...')
  console.time('üßπ Cleaned up the database...')
  await prisma.word.deleteMany()
  console.timeEnd('üßπ Cleaned up the database...')

  // Create some tags
  const tag1 = await prisma.tag.upsert({
    where: { name: '–¥–æ–º' },
    update: {},
    create: {
      name: '–¥–æ–º',
    },
  });

  const tag2 = await prisma.tag.upsert({
    where: { name: '–∫–æ–º–Ω–∞—Ç–∞' },
    update: {},
    create: {
      name: '–∫–æ–º–Ω–∞—Ç–∞',
    },
  });

  const words = [
    {
      headword: '—Ö–∞–ª',
      root: '—Ö–∞–ª',
      speechPart: '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
      ergative: 'a',
      origin: '–∞–≥—É–ª—å—Å–∫–∏–π',
      translations: {
        create: [
          {
            translation: '–¥–æ–º',
          },
          {
            translation: '–∫–æ–º–Ω–∞—Ç–∞',
          },
        ],
      },
      examples: {
        create: [
          {
            example: '–≥—å–∞–≤–∞ —Ö–∞–ª',
            translation: '–≤—ã—Å–æ–∫–∏–π –¥–æ–º',
          },
          {
            example: '–∑—É–Ω —Ö–∞–ª–∞—ä –∞–π–∞',
            translation: '–Ø –¥–æ–º–∞',
          },
        ],
      },
      tags: {
        connect: [{ id: tag1.id }, { id: tag2.id }],
      },
    },

    {
      headword: '—É–∫–∫–∞—Å',
      root: '—É–∫–∫',
      speechPart: '–≥–ª–∞–≥–æ–ª',
      ergative: null,
      origin: '–∞–≥—É–ª—å—Å–∫–∏–π',
      translations: {
        create: [
          {
            translation: '–±–µ–∂–∞—Ç—å',
          },

        ],
      },
      examples: {
        create: [
          {
            example: '—Ö–∞–ª–∞—ä–¥–∏ —É–∫–∫—É–Ω–µ',
            translation: '–ø–æ–±–µ–∂–∞–ª –¥–æ–º–æ–π',
          },
          {
            example: '–≥–∏—Ç–∞–Ω —É–∫–∫–∞–π–∞',
            translation: '–∫–æ—à–∫–∞ –±–µ–∂–∏—Ç',
          },
        ],
      },
      tags: {
        connect: [{ id: tag1.id }, { id: tag2.id }],
      },
    },
  ]



  for (let i = 0; i < 2; i++) {
    if (i % 2 === 0) {
      await prisma.word.create({
        data: words[0]
      })

    } else {
      await prisma.word.create({
        data: words[1]
      })
    }
  }
  console.log('üå± DB has been seeded...')

}

main()
  .catch(e => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });